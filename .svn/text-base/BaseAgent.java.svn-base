import java.io.*;
import java.awt.*;
import java.awt.event.*;
import java.util.LinkedList;
import java.util.Iterator;
import java.util.StringTokenizer;
/**
 * @author:  Wayne Iba
 * @date:    3-12-2012
 * @version: Beta 0.5
 *
 * BaseAgent controls a GOBAgent by either moving toward the food as given by
 * the smell sense, OR by moving toward another agent that is visible in its
 * field of view.  The idea is to very simply enable a following behavior
 */

public class BaseAgent { 
    private GridClient gc;
    private String retImage;
    private static final String retinalActionMap = "lbbbrll rrlfffrffffffffffffffffffff";
    private static final int cellSize = 40;
    private static final int cx = 5;
    private static final int ry = 7;
    private static final int dashHeight=200;
    private LinkedList visField;
    private LinkedList visAgents;
    private GridDisplay gd;
    private boolean displaySense = true;
    private boolean termOut = false; // whether to display ascii form of visual map
    private String myID;
    // sensory fields
    private char smell = '?';
    private String heading;
    private String inventory;
    private String ground;
    private String message;
    private String energy;
    private String lastActionStatus;
    private String worldTime;


    public BaseAgent(String h, int p) {
	gc = new GridClient(h, p);
	myID = gc.myID;
	visField = new LinkedList(); //the visual field contents will be held in linked list
	visAgents = new LinkedList();
	//gd = new GridDisplay(cx, ry, cellSize);  //initialize the graphical display
	//db = new Dashboard(cx * cellSize, dashHeight, gridOut);
	//add(gd);
	//add(db);
    }


    /**
     * chooseAction : check for a visible agent in the field of view
     * and move toward it if visible -- otherwise follow the nose toward food
     */
    public String chooseAction() {
	// following another agent if present
	if ( inventory.length() > 2 && inventory.charAt(2) == '+' )
	    return "u";
	else if ( smell == 'h' )
	    return "g +";
	else if ( lastActionStatus.equals("fail") )
	    return "w";
	else if ( ! visAgents.isEmpty() ) {
	    GOBAgent tag = (GOBAgent) visAgents.getFirst();
	    int idx = (6 - tag.pos.y)*5 + tag.pos.x;
	    return retinalActionMap.substring( idx, idx+1 );
	} else 
	    return String.valueOf(smell);
    }

    
     /**
     * getSensoryInfo gets the direcion to the food
     * LINE0: # of lines to be sent or one of: die, success, or End
     * LINE1: smell (food direction)
     * LINE2: inventory
     * LINE3: visual contents
     * LINE4: ground contents
     * LINE5: messages
     * LINE6: remaining energy
     * LINE7: lastActionStatus
     * LINE8: world time
     * pre: gridIn is initialized and connected to the grid server socket
     * post: heading stores direction to the food f, b, l, r, or h
     */
    public void getSensoryInfo() {
	String[] senseData = gc.sensoryGet();
	// 1: get the smell info
	smell = senseData[0].toCharArray()[0];
	heading = direction(smell);
	// 2: get the inventory
	inventory = senseData[1];
	// 3: process the visual info
	processRetinalField(senseData[2]);
	// 4: get ground contents
	ground = senseData[3];
	// 5: get messages
	message = senseData[4]; //CHECKS MESSAGES ****CHANGE****
	// 6: energy
	energy = senseData[5];
	// 7: lastActionStatus
	lastActionStatus = senseData[6];
	// 8: world time
	worldTime = senseData[7];

	// store or update according to the data just read. . . .
	//gd.updateGDObjects(visField);
	//db.updateLabels(heading, inventory, ground, energy, message, lastActionStatus, worldTime);
    }

    /* processRetinalField: takes a string input from the Maeden server and converts it into the GridObjects
     * Pre: String info contains list of list of list of chars(?)
     * Post: visual raphical map is constructed
     */
    protected void processRetinalField(String info) {
	StringTokenizer visTokens = new StringTokenizer(info, "(", true);
	visTokens.nextToken();
	visField.clear();
	for (int i = 6; i >= 0; i--) {              //iterate backwards so character printout displays correctly
	    visTokens.nextToken();
	    for (int j=0; j <=4; j++) {             //iterate through the columns
		visTokens.nextToken();
		String visChars = visTokens.nextToken();
		char[] visArray = visChars.toCharArray();
		for(int x = 0; x < visChars.length(); x++) {
		    char cellChar = visArray[x];
		    switch(cellChar) {    //add the GridObjects for the graphical display
		    case ' ': break;
		    case '@': visField.addLast(new GOBRock(j, i, cellSize)); break;         //Rock
		    case '+': visField.addLast(new GOBFood(j, i, cellSize)); break;         //Food
		    case '#': visField.addLast(new GOBDoor(j, i, cellSize)); break;         //Door
		    case '*': visField.addLast(new GOBWall(j, i, cellSize)); break;         //Wall
		    case '=': visField.addLast(new GOBNarrows(j, i, cellSize)); break;      //Narrows
		    case 'K': visField.addLast(new GOBKey(j, i, cellSize)); break;          //Key
		    case 'T': visField.addLast(new GOBHammer(j, i, cellSize)); break;       //Hammer
		    case 'Q': visField.addLast(new GOBQuicksand(j, i, cellSize)); break;    //Quicksand
		    case 'O': visField.addLast(new GOBFoodCollect(j, i, cellSize)); break;  //Food Collection
		    case '$': visField.addLast(new GOBGold(j, i, cellSize, gd)); break;   //Gold
		    default:
			if(cellChar >= '0' && cellChar <= '9' && cellChar != String.valueOf(gc.myID).charAt(0)){
			    GOBAgent agnt = new GOBAgent(j, i, cellSize, 'N');
			    visField.addLast(agnt);
			    visAgents.addLast(agnt);
			} else if((cellChar >= '0' && cellChar <= '9' && cellChar != String.valueOf(gc.myID).charAt(0) ) || cellChar == 'H') {
			    GOBAgent agnt = new GOBAgent(j, i, cellSize, '?');
			    visField.addLast(agnt);
			    visAgents.addLast(agnt);
			}
		    }
		}
		//System.out.println("i: " + i + " j: " + j);
	    }
	}
    }

    
    /**
     * direction  and returns a string to display in the terminal
     * pre: heading has value f, b, l, r, or h
     * post: corresponding string is returned
     */
    public String direction(char h) {
	switch(h) {
	case 'f': return "forward";
	case 'b': return "back";
	case 'l': return "left";
	case 'r': return "right";
	case 'h': return "here!";
	}
	return "error with the direction";
    }

    /**
     * run: ....
     */
    public void run(){
	while (true) {
	    visAgents.clear();
	    getSensoryInfo();
	    //displaySenseInfo();
	    gc.effectorSend(chooseAction());
	    try {Thread.sleep(1000);} catch (Exception e) {System.out.println("failed sleeping"); }
	    //gd.repaint();
	}
    }

    /**
     * main: kicks things off
     */
    public static void main(String[] args){
	BaseAgent ba = new BaseAgent("localhost", GridClient.MAEDENPORT);
	ba.run();
    }


}
